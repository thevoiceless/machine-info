#!/usr/bin/env ruby

require 'optparse'
require 'fcntl'

def exit_display_usage(opts)
	puts opts
	exit 1
end

def exit_if_dir_not_exist(path, args)
	if not File.directory?(path.chomp)
		puts "The given input directory does not exist."
		exit_display_usage(args)
	end
end

# Parse and validate command-line arguments
# Python's Argparse is far superior to Ruby's OptionParser, so this gets messy
options = {}
args = OptionParser.new do |opts|
	opts.banner = "Usage: alamode-publish (-s DIRECTORY | Pipe from STDIN) [-d DIRECTORY]"

	opts.on("-s", "--input-dir DIRECTORY", "Directory in which to look for host data files") do |param|
		options[:input_dir] = param
	end

	opts.on("-d", "--output-dir [DIRECTORY]", "Directory in which to save HTML files (defaults to stdout if not given)") do |param|
		options[:output_dir] = param
	end

	opts.on_tail("-h", "--help", "Show this message") do
		puts opts
		exit
	end
end
args.parse!

# Because OptionParser has no built-in way to specify mutually exclusive groups, it has to be done manually
# Set flag if piping from STDIN
options[:input_from_pipe] = (STDIN.fcntl(Fcntl::F_GETFL, 0) == 0)
# Read from STDIN 
if options[:input_from_pipe]
	# Cannot also read from a directory
	if options[:input_dir]
		exit_display_usage(args)
	end
	# Verify that the path is valid
	input_dir_path = STDIN.gets
	exit_if_dir_not_exist(input_dir_path, args)
# Must specify input directory if not reading from STDIN
elsif options[:input_dir]
	input_dir_path = options[:input_dir]
	# Directory must exist
	exit_if_dir_not_exist(input_dir_path, args)
# The user did not specify an input path
else
	exit_display_usage(args)
end

# Check if output directory was given
if options.has_key?(:output_dir)
	# Flag "-d" was given with no argument
	if options[:output_dir].nil?
		exit_display_usage(args)
	# Try to create directory if it doesn't already exist
	else
		begin
			Dir.mkdir(options[:output_dir]) if not File.directory?(options[:output_dir])
		rescue Exception => e
			puts "Error creating directory: #{e}"
			exit 1
		end
	end
	output_dir_path = options[:output_dir]
end

# Finally, the fun stuff
puts "Reading from: #{input_dir_path}"
if output_dir_path
	puts "Output to: #{output_dir_path}"
else
	puts "Output to: STDOUT"
end
puts options